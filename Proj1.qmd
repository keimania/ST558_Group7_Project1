---
title: "Project1_g7"
format: html
editor: visual
---

First, we load our libraries

```{r}
library(httr)
library(tibble)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tidyr)

```

```{r}
# 1. helper function
helper <- function(year = 2022,
                   numeric_vars = c("AGEP", "PWGTP"),
                   categorical_vars = c("SEX"),
                   geography = "All",
                   geo_level = "*",
                   arguments = NULL) {
  
  # Input Validation
  ## year validation
  if (!is.numeric(year) || length(year) != 1 || year < 2010 || year > 2022) {
    stop("Error: 'year' must be a single number between 2010 and 2022.")
  }
  
  ## variable validation
  valid_numeric_vars <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  if (!all(numeric_vars %in% valid_numeric_vars)) {
    stop("Error: Invalid numeric variables requested.")
  }
  
  valid_categorical_vars <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  if (!all(categorical_vars %in% valid_categorical_vars)) {
    stop("Error: Invalid categorical variables requested.")
  }
  
  ## Geography validation : region, division, state should be lowercase
  valid_geography <- c("All", "region", "division", "state")
  if (!all(geography %in% valid_geography)) {
    stop("Error: Invalid geography requested.")
  }
  
  base <- paste("https://api.census.gov/data/", year, "/acs/acs1/pums", sep = "")
  
  # Construct query parameters
  ## Ensure PWGTP is always included for calculations
  all_vars <- unique(c("PWGTP", numeric_vars, categorical_vars))
  ## If geography is "All", do not include 'for' parameter
  if (geography == "All") {
    query_params <- c(
      list('get' = paste(all_vars, collapse = ",")),
      arguments
    )
    ## If geography is specified, include geography and geo level in 'for' parameter
  } else {
    query_params <- c(
      list('get' = paste(all_vars, collapse = ",")),
      list('for' = paste0(geography, ":", geo_level)),
      arguments
    )
  }
  
  # request data from API
  response <- GET(url = base, query = query_params)
  if (status_code(response) != 200) {
    stop("Error: The Census API returned an error. Status code: ", status_code(response))
  }
  parsed <- fromJSON(rawToChar(response$content))
  
  # Set Column names as first row and convert to tibble
  header <- parsed[1,]
  data <- parsed[-1,]
  colnames(data) <- header
  result_tibble <- as_tibble(data)
  return(result_tibble)
}

# 2. multiple helper function

multiple_years_helper<- function(years, ...) {
  
  # Use lapply to call the single-year function for each year in the vector
  multiple_years_data <- lapply(years, function(y) {
    message("Fetching data for year: ", y)
    
    # Call the single-year function, passing along extra arguments
    result_tibble <- helper(year = y, ...)
    
    # Add a year column
    result_tibble$year <- y
    
    # print(result_tibble)
    return(result_tibble)
  })
  
  # Combine all the tibbles into a single one
  combined_result_tibble <- bind_rows(multiple_years_data)
  
  return(combined_result_tibble)
}

# Example 1: Single Year Query
message("Example 1: Single Year Query")

# a. Get data for region:3, year:2021, SCHL:24 including AGEP, GASP, SEX
data_2021 <- helper(
  year = 2021,
  numeric_vars = c("AGEP", "GASP"),
  categorical_vars = c("SEX"),
  geography = c("region"),
  geo_level = c("3"),
  arguments = list('SCHL' = "24")
)

print(data_2021)

# b. Get data for state:6, year:2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH
data_2022 <- helper(
  year = 2022,
  numeric_vars = c("GRPIP", "JWAP", "JWDP", "JWMNP"),
  categorical_vars = c("FER", "HHL", "HISPEED", "SCH"),
  geography = c("state"),
  geo_level = c("6"),
  arguments = list('JWTRNS' = "10")
)

print(data_2022)

# Example 2: Multiple Year Query
message("Example 2: Multiple Year Query")

# a. Get data for region:3, years:2021-2022, SCHL:24 including
data_2021_2022 <- multiple_years_helper(
  years = c(2021, 2022),
  numeric_vars = c("AGEP", "GASP"),
  categorical_vars = c("SEX"),
  geography = c("region"),
  geo_level = c("3"),
  arguments = list('SCHL' = "24")
)

print(data_2021_2022)

# b. Get data for state:6, years:2019, 2021, 2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH
data_2019_2022 <- multiple_years_helper(
  # Caution : There is no data in 2020
  years = c(2019, 2021, 2022),
  numeric_vars = c("GRPIP", "JWAP", "JWDP", "JWMNP"),
  categorical_vars = c("FER", "HHL", "HISPEED", "SCH"),
  geography = c("state"),
  geo_level = c("6"),
  arguments = list('JWTRNS' = "10")
)

print(data_2019_2022)

```

## Summary Method

### Adding Additional Class

First, we modify our function to create the data, to make the tibble have an additional class of census.

I'm just copying the original helper function. The modified line is noted.

```{r}
# 1. helper function
helper <- function(year = 2022,
                   numeric_vars = c("AGEP", "PWGTP"),
                   categorical_vars = c("SEX"),
                   geography = "All",
                   geo_level = "*",
                   arguments = NULL) {
  
  # Input Validation
  ## year validation
  if (!is.numeric(year) || length(year) != 1 || year < 2010 || year > 2022) {
    stop("Error: 'year' must be a single number between 2010 and 2022.")
  }
  
  ## variable validation
  valid_numeric_vars <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  if (!all(numeric_vars %in% valid_numeric_vars)) {
    stop("Error: Invalid numeric variables requested.")
  }
  
  valid_categorical_vars <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  if (!all(categorical_vars %in% valid_categorical_vars)) {
    stop("Error: Invalid categorical variables requested.")
  }
  
  ## Geography validation : region, division, state should be lowercase
  valid_geography <- c("All", "region", "division", "state")
  if (!all(geography %in% valid_geography)) {
    stop("Error: Invalid geography requested.")
  }
  
  base <- paste("https://api.census.gov/data/", year, "/acs/acs1/pums", sep = "")
  
  # Construct query parameters
  ## Ensure PWGTP is always included for calculations
  all_vars <- unique(c("PWGTP", numeric_vars, categorical_vars))
  ## If geography is "All", do not include 'for' parameter
  if (geography == "All") {
    query_params <- c(
      list('get' = paste(all_vars, collapse = ",")),
      arguments
    )
    ## If geography is specified, include geography and geo level in 'for' parameter
  } else {
    query_params <- c(
      list('get' = paste(all_vars, collapse = ",")),
      list('for' = paste0(geography, ":", geo_level)),
      arguments
    )
  }
  
  # request data from API
  response <- GET(url = base, query = query_params)
  if (status_code(response) != 200) {
    stop("Error: The Census API returned an error. Status code: ", status_code(response))
  }
  parsed <- fromJSON(rawToChar(response$content))
  
  # Set Column names as first row and convert to tibble
  header <- parsed[1,]
  data <- parsed[-1,]
  colnames(data) <- header
  result_tibble <- as_tibble(data)
  
  ## Adding an additional class to the tibble
  class(result_tibble) <- c("census", class(result_tibble))
  
  
  return(result_tibble)
}
```

### Summary Method

-   Below is a summary method.

-   As arguments, it takes the tibble with class census, the numeric variable(s) to summarize, the categorical variable(s) to summarize. Default values for numeric variables and categorical variables are all variables.

-   It returns a named list that contains summary statistics for each column.

-   A count table is created for categorical variables, and mean and standard deviation are calculated for numeric variables.

-   The names of the returned list described the summarized variable and relevant statistic.

```{r}
#Defining default Numeric Variables for the method
numeric_vars <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")

#Defining Default Categorical Variables for the method
categorical_vars <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")

summary.census <- function(cen_tbl,num_vars=numeric_vars, cat_vars=categorical_vars ){
  
  # initialize list to return information
  ret_list<-list() 
  
  # First, lets get counts of categorical variables
  # We append the count tables to the list
  for (cat_var in cat_vars){
    
    #create summary table for column
    sum_tab<-table(cen_tbl[[cat_var]])
    
    # add table to return list
    item_name<-paste(cat_var, "count")
    ret_list[[item_name]] <- sum_tab
  }
  
  
  # Next, we get the means and standard deviations for our numeric variables
  for (num_var in num_vars){
    
    # Get column
    num_var_col<-cen_tbl[[num_var]]
    
    # get mean and SD of col, ignore NA values
    num_var_col_mean<-(mean(as.numeric(num_var_col, na.rm = TRUE)))
    num_var_col_sd<-(sd(as.numeric(num_var_col, na.rm = TRUE)))
    
    # Add items to return list
    
    mean_item_name<-paste(num_var, "mean")
    sd_item_name<-paste(num_var,"SD")
    ret_list[[mean_item_name]] <- num_var_col_mean
    ret_list[[sd_item_name]] <- num_var_col_sd
  }
  
  print(ret_list)
}
```

### Testing the new Summary function

First, I return something with an API query.

```{r}
## TESTING
data_2021 <- helper(
  year = 2021,
  numeric_vars = c("AGEP", "GASP"),
  categorical_vars = c("SEX"),
  geography = c("region"),
  geo_level = c("3"),
  arguments = list('SCHL' = "23,24")
) 

```

Next, let's test it out without specifying any variables.

```{r}
summary(data_2021)
```

This seems to work well.

Next, let's test it out, specifying some variables and verifying the calculated statistics.

```{r}

summary(data_2021,c("GASP", "AGEP"), c("SEX","SCHL"))


```

We will calculate these statistics without the function to verify that it is working properly.

```{r}

print("Table by SEX Variable")
table(data_2021[["SEX"]])

print("Table by SCHL Variable")
table(data_2021[["SCHL"]])

print("GASP mean")
mean(as.numeric(data_2021[["GASP"]]),na.rm=TRUE)

print("GASP SD")
sd(as.numeric(data_2021[["GASP"]]),na.rm=TRUE)

print("AGEP mean")
mean(as.numeric(data_2021[["AGEP"]]),na.rm=TRUE)

print("AGEP SD")
sd(as.numeric(data_2021[["AGEP"]]),na.rm=TRUE)



```

The calculated values match the values given by our function. This is good!

## Plotting Method

-   The following code creates box plots based on a user specified categorical variable and numeric variable.

-   It also checks to make sure variables are correctly specified, and stops if they aren't.

-   I filter out na values before plotting, to ensure the plot is accurate and looks good.

```{r}
# First attempt at plot.census function
plot.census<-function(cen_tbl,cat_var,num_var){
  
  ## variable validation
  valid_numeric_vars <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  if (!(num_var %in% valid_numeric_vars)) {
    stop("Error: Invalid numeric variables inputted")
  }
  
  valid_categorical_vars <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  if (!(cat_var %in% valid_categorical_vars)) {
    stop("Error: Invalid categorical variables inputted")
  }
  # The all_of command helps handle string column names
plt_tbl <- cen_tbl %>%
  select(all_of(c(cat_var, num_var, "PWGTP"))) %>%
  drop_na(all_of(c(cat_var, num_var)))
  
  
ggplot(plt_tbl, aes(x = get(cat_var), y = as.numeric(get(num_var)), weight = as.numeric(PWGTP))) +
  geom_boxplot()
}
```

Testing the plot function

```{r}

# making sure the stop clause works
plot.census(data_2021, cat_var = "SCL", num_var = "GASP")

plot.census(data_2021, cat_var = "SCHL", num_var = "GSP")

plot.census(data_2021, cat_var = "SCHL", num_var = "GASP")

plot.census(data_2021, cat_var = "SCHL", num_var = "AGEP")

plot.census(data_2021, cat_var = "SEX", num_var = "GASP")
```

![](http://127.0.0.1:45447/chunk_output/93E863F1b2d5ce16/27E0E6ED/ckd7kv56shqsd/000009.png)

## Investigating Something from the Data

-   I'd like to investigate affordability between states, over time. My fundamental question is--how has gross rent as a percentage of household income past 12 months changed over time, and does this vary by sex? Is there a difference in this between North Carolina, a state that is considered relatively affordable, and New York, a state that is reputed to be affordable?

First, we get the data.

```{r}
data_2010_NC <- helper(
  year = 2010,
  numeric_vars = c("GRPIP"),
  categorical_vars = c("SEX"),
  geography = c("state"),
  geo_level = c("37"),
) 

data_2010_NY <- helper(
  year = 2010,
  numeric_vars = c("GRPIP"),
  categorical_vars = c("SEX"),
  geography = "state",
  geo_level = "36"
)

```

```{r}
data_2022_NC <- helper(
  year = 2022,
  numeric_vars = c("GRPIP"),
  categorical_vars = c("SEX"),
  geography = c("state"),
  geo_level = c("37"),
) 

data_2022_NY <- helper(
  year = 2022,
  numeric_vars = c("GRPIP"),
  categorical_vars = c("SEX"),
  geography = "state",
  geo_level = "36"
)

```

Let's look at a summary of the data for our relevant variables

```{r}
summary(data_2010_NC,c("GRPIP"), c("SEX"))


```

```{r}
summary(data_2022_NC,c("GRPIP"), c("SEX"))
```

In North Carolina, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010.

```{r}
summary(data_2010_NY,c("GRPIP"), c("SEX"))

```

```{r}
summary(data_2022_NY,c("GRPIP"), c("SEX"))
```

In New York, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010. This is surprising--there is a lot of discourse about rising rents in New York and in the United States in general. However, New Yorkers are still spending more on their rents on average than North Carolinians.

## Plotting

First, I'd like to compare sex and GRPIP.

```{r}
plot.census(data_2010_NC, cat_var = "SEX", num_var = "GRPIP")
```

```{r}
plot.census(data_2022_NC, cat_var = "SEX", num_var = "GRPIP")
```

While GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average.

```{r}
plot.census(data_2010_NY, cat_var = "SEX", num_var = "GRPIP")

```

```{r}
plot.census(data_2022_NY, cat_var = "SEX", num_var = "GRPIP")
```

-   While GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in New York as well as North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average. However, comparing North Carolina and New York, it appears as though North Carolina has a slightly larger gap between rent GRPIP between men and women.

-   While GRPIP generally decreased for North Carolinians and New Yorkers between 2010 and 2022, the gap in GRPIP persists between men and women. This could be a result of the income gap.
