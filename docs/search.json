[
  {
    "objectID": "Proj1.html",
    "href": "Proj1.html",
    "title": "Project1_g7",
    "section": "",
    "text": "The goal of this project is to create some functions to query the PUMS census API, and then to summarize and visualize queries. After building these functions, we will then use them to invistage the relationship between location, gross rent as a percentage of income, and sex.\n\n\n\nWe would ultimately like to build our API querying functions here. Our goal is to allow the user to get information from the API related to the following numeric variables:\n\nAGEP — Age of the person (in years)\nGASP--Gas constant (monthly)\nGRPIP — Gross Rent as a Percentage of Income\nJWAP — Time of arrival at wor\nJWDP — Time of departure from work\nJWMNP — Travel time to work (in minutes)\n\nAnd categorical variables:\n\nFER — Fertility (whether the woman had a birth in the last 12 months)\nHHL — Household language\nHISPEED — Access to high-speed internet\nJWTRNS — Means of transportation to work\nSCH — School enrollment\nSCHL — Educational attainment\nSEX — Sex\n\nWe would also like to be able to specify the geography level. The possible values for this are All, Region, Division, or State. The user can then specify which region, divison or state they would like to return information for using the geo_level parameter.\nFurthemore, we will also allow the user to specify an optional argument to subset the data.\n\n\nFirst, we load our libraries\n\nlibrary(httr)\nlibrary(tibble)\nlibrary(jsonlite)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(tidyr)\n\nFirst, we will build a helper function to take what is returned by GET() and turn it into a tibble. We are also building in all the requirements specified at the beginning of the data processing section.\n\n# 1. helper function\nhelper &lt;- function(year = 2022,\n                   numeric_vars = c(\"AGEP\", \"PWGTP\"),\n                   categorical_vars = c(\"SEX\"),\n                   geography = \"All\",\n                   geo_level = \"*\",\n                   arguments = NULL) {\n  \n  # Input Validation\n  ## year validation\n  if (!is.numeric(year) || length(year) != 1 || year &lt; 2010 || year &gt; 2022) {\n    stop(\"Error: 'year' must be a single number between 2010 and 2022.\")\n  }\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!all(numeric_vars %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables requested.\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(categorical_vars %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables requested.\")\n  }\n  \n  ## Geography validation : region, division, state should be lowercase\n  valid_geography &lt;- c(\"All\", \"region\", \"division\", \"state\")\n  if (!all(geography %in% valid_geography)) {\n    stop(\"Error: Invalid geography requested.\")\n  }\n  \n  base &lt;- paste(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums\", sep = \"\")\n  \n  # Construct query parameters\n  ## Ensure PWGTP is always included for calculations\n  all_vars &lt;- unique(c(\"PWGTP\", numeric_vars, categorical_vars))\n  ## If geography is \"All\", do not include 'for' parameter\n  if (geography == \"All\") {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      arguments\n    )\n    ## If geography is specified, include geography and geo level in 'for' parameter\n  } else {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      list('for' = paste0(geography, \":\", geo_level)),\n      arguments\n    )\n  }\n  \n  # request data from API\n  response &lt;- GET(url = base, query = query_params)\n  if (status_code(response) != 200) {\n    stop(\"Error: The Census API returned an error. Status code: \", status_code(response))\n  }\n  parsed &lt;- fromJSON(rawToChar(response$content))\n  \n  # Set Column names as first row and convert to tibble\n  header &lt;- parsed[1,]\n  data &lt;- parsed[-1,]\n  colnames(data) &lt;- header\n  result_tibble &lt;- as_tibble(data)\n  \n  #Convert numeric variables as numeric\n  for (num_var in numeric_vars) {\n  if (num_var %in% colnames(result_tibble)) {\n    result_tibble[[num_var]] &lt;- as.numeric(result_tibble[[num_var]])}}\n\n  # Converting categorical variables to be factors\n  for (cat_var in categorical_vars) {\n  if (cat_var %in% colnames(result_tibble)) {\n    result_tibble[[cat_var]] &lt;- factor(result_tibble[[cat_var]])\n  }\n}\n  \n  \n\nreturn(result_tibble)\n  \n}\n\nTesting the helper function\n\n# Example 1: Single Year Query\n\n# a. Get data for region:3, year:2021, SCHL:24 including AGEP, GASP, SEX\ndata_2021 &lt;- helper(\n  year = 2021,\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"24\")\n)\n\nprint(data_2021)\n\n# A tibble: 14,810 × 6\n   PWGTP  AGEP  GASP SEX   SCHL  region\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; \n 1 20       49     3 1     24    3     \n 2 51       46     3 1     24    3     \n 3 9        85     3 2     24    3     \n 4 79       67     3 2     24    3     \n 5 12       76     3 1     24    3     \n 6 13       94     3 2     24    3     \n 7 2        49     3 1     24    3     \n 8 5        25     3 2     24    3     \n 9 30       39     3 1     24    3     \n10 6        70     3 1     24    3     \n# ℹ 14,800 more rows\n\n# b. Get data for state:6, year:2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH\ndata_2022 &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\"),\n  categorical_vars = c(\"FER\", \"HHL\", \"HISPEED\", \"SCH\"),\n  geography = c(\"state\"),\n  geo_level = c(\"6\"),\n  arguments = list('JWTRNS' = \"10\")\n)\n\nprint(data_2022)\n\n# A tibble: 4,927 × 11\n   PWGTP GRPIP  JWAP  JWDP JWMNP FER   HHL   HISPEED SCH   JWTRNS state\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt; &lt;chr&gt;  &lt;chr&gt;\n 1 151       0   167   103     5 2     2     1       1     10     06   \n 2 66        0    74    31    20 0     4     2       1     10     06   \n 3 75        0    74    31    20 0     4     2       3     10     06   \n 4 74       31   106    61    30 0     2     1       1     10     06   \n 5 173      38    97    55    15 0     1     1       1     10     06   \n 6 63        0    87    47     5 0     1     1       1     10     06   \n 7 16        0   106    67     1 0     1     2       1     10     06   \n 8 98        0    94    55     1 0     1     2       1     10     06   \n 9 102       0    74    31    20 0     1     1       1     10     06   \n10 48       30   125    82     5 2     4     1       1     10     06   \n# ℹ 4,917 more rows\n\n\nThe results from the helper functions look good. We will now move on to building a function that can handle queries across multiple years.\n\nmultiple_years_helper&lt;- function(years, ...) {\n  \n  # Use lapply to call the single-year function for each year in the vector\n  multiple_years_data &lt;- lapply(years, function(y) {\n    message(\"Fetching data for year: \", y)\n    \n    # Call the single-year function, passing along extra arguments\n    result_tibble &lt;- helper(year = y, ...)\n    \n    # Add a year column\n    result_tibble$year &lt;- y\n    \n    # print(result_tibble)\n    return(result_tibble)\n  })\n  \n  # Combine all the tibbles into a single one\n  combined_result_tibble &lt;- bind_rows(multiple_years_data)\n  \n  return(combined_result_tibble)\n}\n\nNow that the multiple year query function has been built, we will test it out.\n\n# Example 2: Multiple Year Query\nmessage(\"Example 2: Multiple Year Query\")\n\nExample 2: Multiple Year Query\n\n# a. Get data for region:3, years:2021-2022, SCHL:24 including\ndata_2021_2022 &lt;- multiple_years_helper(\n  years = c(2021, 2022),\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"24\")\n)\n\nFetching data for year: 2021\n\n\nFetching data for year: 2022\n\nprint(data_2021_2022)\n\n# A tibble: 31,031 × 7\n   PWGTP  AGEP  GASP SEX   SCHL  region  year\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1 20       49     3 1     24    3       2021\n 2 51       46     3 1     24    3       2021\n 3 9        85     3 2     24    3       2021\n 4 79       67     3 2     24    3       2021\n 5 12       76     3 1     24    3       2021\n 6 13       94     3 2     24    3       2021\n 7 2        49     3 1     24    3       2021\n 8 5        25     3 2     24    3       2021\n 9 30       39     3 1     24    3       2021\n10 6        70     3 1     24    3       2021\n# ℹ 31,021 more rows\n\n# b. Get data for state:6, years:2019, 2021, 2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH\ndata_2019_2022 &lt;- multiple_years_helper(\n  # Caution : There is no data in 2020\n  years = c(2019, 2021, 2022),\n  numeric_vars = c(\"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\"),\n  categorical_vars = c(\"FER\", \"HHL\", \"HISPEED\", \"SCH\"),\n  geography = c(\"state\"),\n  geo_level = c(\"6\"),\n  arguments = list('JWTRNS' = \"10\")\n)\n\nFetching data for year: 2019\n\n\nFetching data for year: 2021\n\n\nFetching data for year: 2022\n\nprint(data_2019_2022)\n\n# A tibble: 13,771 × 12\n   PWGTP GRPIP  JWAP  JWDP JWMNP FER   HHL   HISPEED SCH   JWTRNS state  year\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 52        0   192   115    12 2     0     0       2     10     6      2019\n 2 16        0   117    76    10 0     0     0       2     10     6      2019\n 3 21        0   181   109    15 0     0     0       2     10     6      2019\n 4 34        0   106    64    15 0     0     0       1     10     6      2019\n 5 33        0   100    59    10 2     0     0       3     10     6      2019\n 6 93        0   165   102     6 0     0     0       2     10     6      2019\n 7 61        0    97    57     5 2     0     0       2     10     6      2019\n 8 94        0    91    50    10 0     0     0       1     10     6      2019\n 9 61        0    69    29     5 0     0     0       1     10     6      2019\n10 25        0    94    51    20 2     0     0       2     10     6      2019\n# ℹ 13,761 more rows\n\n\n\n\n\n\n\n\n\nWe would like to add another class to the data, so we can create census specific methods for it.\n\n\n\nFirst, we modify our helper function to create the data, to make the tibble have an additional class of census.\nI just copied the original helper function from above. The modified line is noted.\n\n\n# 1. helper function\nhelper &lt;- function(year = 2022,\n                   numeric_vars = c(\"AGEP\", \"PWGTP\"),\n                   categorical_vars = c(\"SEX\"),\n                   geography = \"All\",\n                   geo_level = \"*\",\n                   arguments = NULL) {\n  \n  # Input Validation\n  ## year validation\n  if (!is.numeric(year) || length(year) != 1 || year &lt; 2010 || year &gt; 2022) {\n    stop(\"Error: 'year' must be a single number between 2010 and 2022.\")\n  }\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!all(numeric_vars %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables requested.\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(categorical_vars %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables requested.\")\n  }\n  \n  ## Geography validation : region, division, state should be lowercase\n  valid_geography &lt;- c(\"All\", \"region\", \"division\", \"state\")\n  if (!all(geography %in% valid_geography)) {\n    stop(\"Error: Invalid geography requested.\")\n  }\n  \n  base &lt;- paste(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums\", sep = \"\")\n  \n  # Construct query parameters\n  ## Ensure PWGTP is always included for calculations\n  all_vars &lt;- unique(c(\"PWGTP\", numeric_vars, categorical_vars))\n  ## If geography is \"All\", do not include 'for' parameter\n  if (geography == \"All\") {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      arguments\n    )\n    ## If geography is specified, include geography and geo level in 'for' parameter\n  } else {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      list('for' = paste0(geography, \":\", geo_level)),\n      arguments\n    )\n  }\n  \n  # request data from API\n  response &lt;- GET(url = base, query = query_params)\n  if (status_code(response) != 200) {\n    stop(\"Error: The Census API returned an error. Status code: \", status_code(response))\n  }\n  parsed &lt;- fromJSON(rawToChar(response$content))\n  \n  # Set Column names as first row and convert to tibble\n  header &lt;- parsed[1,]\n  data &lt;- parsed[-1,]\n  colnames(data) &lt;- header\n  result_tibble &lt;- as_tibble(data)\n  \n  #Convert numeric variables as numeric\n  for (num_var in numeric_vars) {\n  if (num_var %in% colnames(result_tibble)) {\n    result_tibble[[num_var]] &lt;- as.numeric(result_tibble[[num_var]])}}\n\n  # Converting categorical variables to be factors\n  for (cat_var in categorical_vars) {\n  if (cat_var %in% colnames(result_tibble)) {\n    result_tibble[[cat_var]] &lt;- factor(result_tibble[[cat_var]])\n  }\n}\n  \n  # The following line is our new modification, it adds a new class (census) to our result_tibble\nclass(result_tibble) &lt;- c(\"census\", class(result_tibble))\n\nreturn(result_tibble)\n  \n}\n\n\n\n\n\nBelow is a summary method.\nAs arguments, it takes the tibble with class census, the numeric variable(s) to summarize, the categorical variable(s) to summarize. Default values for numeric variables and categorical variables are all variables.\nIt returns a named list that contains summary statistics for each column.\nA count table is created for categorical variables, and mean and standard deviation are calculated for numeric variables.\nThe names of the returned list described the summarized variable and relevant statistic.\n\n\n#Defining default Numeric Variables for the method\nnumeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n\n#Defining Default Categorical Variables for the method\ncategorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n\nsummary.census &lt;- function(cen_tbl,num_vars=numeric_vars, cat_vars=categorical_vars ){\n  \n  # initialize list to return information\n  ret_list&lt;-list() \n  \n  # First, lets get counts of categorical variables\n  # We append the count tables to the list\n  for (cat_var in cat_vars){\n    \n    #create summary table for column\n    sum_tab&lt;-table(cen_tbl[[cat_var]])\n    \n    # add table to return list\n    item_name&lt;-paste(cat_var, \"count\")\n    ret_list[[item_name]] &lt;- sum_tab\n  }\n  \n  \n  # Next, we get the means and standard deviations for our numeric variables\n  for (num_var in num_vars){\n    \n    # Get column\n    num_var_col&lt;-cen_tbl[[num_var]]\n    \n    # get mean and SD of col, ignore NA values\n    num_var_col_mean&lt;-(mean(as.numeric(num_var_col, na.rm = TRUE)))\n    num_var_col_sd&lt;-(sd(as.numeric(num_var_col, na.rm = TRUE)))\n    \n    # Add items to return list\n    \n    mean_item_name&lt;-paste(num_var, \"mean\")\n    sd_item_name&lt;-paste(num_var,\"SD\")\n    ret_list[[mean_item_name]] &lt;- num_var_col_mean\n    ret_list[[sd_item_name]] &lt;- num_var_col_sd\n  }\n  \n  print(ret_list)\n}\n\n\n\n\nFirst, I return something with an API query.\n\n## TESTING\ndata_2021 &lt;- helper(\n  year = 2021,\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"23,24\")\n) \n\nNext, let’s test it out without specifying any variables.\n\nsummary(data_2021)\n\n$`FER count`\n&lt; table of extent 0 &gt;\n\n$`HHL count`\n&lt; table of extent 0 &gt;\n\n$`HISPEED count`\n&lt; table of extent 0 &gt;\n\n$`JWTRNS count`\n&lt; table of extent 0 &gt;\n\n$`SCH count`\n&lt; table of extent 0 &gt;\n\n$`SCHL count`\n\n   23    24 \n21320 14810 \n\n$`SEX count`\n\n    1     2 \n20215 15915 \n\n$`AGEP mean`\n[1] 55.05569\n\n$`AGEP SD`\n[1] 16.53263\n\n$`GASP mean`\n[1] 48.22793\n\n$`GASP SD`\n[1] 75.93842\n\n$`GRPIP mean`\n[1] NaN\n\n$`GRPIP SD`\n[1] NA\n\n$`JWAP mean`\n[1] NaN\n\n$`JWAP SD`\n[1] NA\n\n$`JWDP mean`\n[1] NaN\n\n$`JWDP SD`\n[1] NA\n\n$`JWMNP mean`\n[1] NaN\n\n$`JWMNP SD`\n[1] NA\n\n\nThis seems to work well.\nNext, let’s test it out, specifying some variables and verifying the calculated statistics.\n\nsummary(data_2021,c(\"GASP\", \"AGEP\"), c(\"SEX\",\"SCHL\"))\n\n$`SEX count`\n\n    1     2 \n20215 15915 \n\n$`SCHL count`\n\n   23    24 \n21320 14810 \n\n$`GASP mean`\n[1] 48.22793\n\n$`GASP SD`\n[1] 75.93842\n\n$`AGEP mean`\n[1] 55.05569\n\n$`AGEP SD`\n[1] 16.53263\n\n\nWe will calculate these statistics without the function to verify that it is working properly.\n\nprint(\"Table by SEX Variable\")\n\n[1] \"Table by SEX Variable\"\n\ntable(data_2021[[\"SEX\"]])\n\n\n    1     2 \n20215 15915 \n\nprint(\"Table by SCHL Variable\")\n\n[1] \"Table by SCHL Variable\"\n\ntable(data_2021[[\"SCHL\"]])\n\n\n   23    24 \n21320 14810 \n\nprint(\"GASP mean\")\n\n[1] \"GASP mean\"\n\nmean(as.numeric(data_2021[[\"GASP\"]]),na.rm=TRUE)\n\n[1] 48.22793\n\nprint(\"GASP SD\")\n\n[1] \"GASP SD\"\n\nsd(as.numeric(data_2021[[\"GASP\"]]),na.rm=TRUE)\n\n[1] 75.93842\n\nprint(\"AGEP mean\")\n\n[1] \"AGEP mean\"\n\nmean(as.numeric(data_2021[[\"AGEP\"]]),na.rm=TRUE)\n\n[1] 55.05569\n\nprint(\"AGEP SD\")\n\n[1] \"AGEP SD\"\n\nsd(as.numeric(data_2021[[\"AGEP\"]]),na.rm=TRUE)\n\n[1] 16.53263\n\n\nThe calculated values match the values given by our function. This is good!\n\n\n\n\n\nThe following code creates box plots based on a user specified categorical variable and numeric variable.\nIt also checks to make sure variables are correctly specified, and stops if they aren’t.\nI filter out na values before plotting, to ensure the plot is accurate and looks good.\n\n\n# First attempt at plot.census function\nplot.census&lt;-function(cen_tbl,cat_var,num_var){\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!(num_var %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables inputted\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!(cat_var %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables inputted\")\n  }\n  # The all_of command helps handle string column names\nplt_tbl &lt;- cen_tbl %&gt;%\n  select(all_of(c(cat_var, num_var, \"PWGTP\"))) %&gt;%\n  drop_na(all_of(c(cat_var, num_var)))\n  \n  \nggplot(plt_tbl, aes(x = get(cat_var), y = as.numeric(get(num_var)), weight = as.numeric(PWGTP))) +\n  geom_boxplot()\n}\n\nTesting the plot function\n\n# making sure the stop clause works\n\n# plot.census(data_2021, cat_var = \"SCL\", num_var = \"GASP\")\n# \n# plot.census(data_2021, cat_var = \"SCHL\", num_var = \"GSP\")\n\n# stop clause does work. Commented these lines out so document could render error free.\n\nplot.census(data_2021, cat_var = \"SCHL\", num_var = \"GASP\")\n\n\n\nplot.census(data_2021, cat_var = \"SCHL\", num_var = \"AGEP\")\n\n\n\nplot.census(data_2021, cat_var = \"SEX\", num_var = \"GASP\")\n\n\n\n\n\n\n\n\n\nI’d like to investigate affordability between states, over time. My fundamental question is–how has gross rent as a percentage of household income past 12 months (GRPIP) changed over time, and does this vary by sex? Is there a difference in this between North Carolina, a state that is considered relatively affordable, and New York, a state that is reputed to be unaffordable?\n\nFirst, we get the data.\n\ndata_2010_NC &lt;- helper(\n  year = 2010,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"state\"),\n  geo_level = c(\"37\"),\n) \n\ndata_2010_NY &lt;- helper(\n  year = 2010,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = \"state\",\n  geo_level = \"36\"\n)\n\n\ndata_2022_NC &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"state\"),\n  geo_level = c(\"37\"),\n) \n\ndata_2022_NY &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = \"state\",\n  geo_level = \"36\"\n)\n\nLet’s look at a summary of the data for our relevant variables\n\nsummary(data_2010_NC,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n45813 49718 \n\n$`GRPIP mean`\n[1] 9.37436\n\n$`GRPIP SD`\n[1] 21.45152\n\n\n\nsummary(data_2022_NC,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n53050 56180 \n\n$`GRPIP mean`\n[1] 7.324297\n\n$`GRPIP SD`\n[1] 18.64659\n\n\nIn North Carolina, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010.\n\nsummary(data_2010_NY,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n91549 98605 \n\n$`GRPIP mean`\n[1] 12.74337\n\n$`GRPIP SD`\n[1] 24.73648\n\n\n\nsummary(data_2022_NY,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n     1      2 \n 98719 105172 \n\n$`GRPIP mean`\n[1] 10.63511\n\n$`GRPIP SD`\n[1] 23.03031\n\n\nIn New York, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010. This is surprising–there is a lot of discourse about rising rents in New York and in the United States in general. However, New Yorkers are still spending more on their rents on average than North Carolinians.\n\n\n\nFirst, I’d like to compare sex and GRPIP.\n\nplot.census(data_2010_NC, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nplot.census(data_2022_NC, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\nWhile GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average.\n\nplot.census(data_2010_NY, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nplot.census(data_2022_NY, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nWhile GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in New York as well as North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average. However, comparing North Carolina and New York, it appears as though North Carolina has a slightly larger gap between rent GRPIP between men and women.\nWhile GRPIP generally decreased for North Carolinians and New Yorkers between 2010 and 2022, the gap in GRPIP persists between men and women. This could be a result of the income gap between men and women."
  },
  {
    "objectID": "Proj1.html#introduction",
    "href": "Proj1.html#introduction",
    "title": "Project1_g7",
    "section": "",
    "text": "The goal of this project is to create some functions to query the PUMS census API, and then to summarize and visualize queries. After building these functions, we will then use them to invistage the relationship between location, gross rent as a percentage of income, and sex."
  },
  {
    "objectID": "Proj1.html#data-processing",
    "href": "Proj1.html#data-processing",
    "title": "Project1_g7",
    "section": "",
    "text": "We would ultimately like to build our API querying functions here. Our goal is to allow the user to get information from the API related to the following numeric variables:\n\nAGEP — Age of the person (in years)\nGASP--Gas constant (monthly)\nGRPIP — Gross Rent as a Percentage of Income\nJWAP — Time of arrival at wor\nJWDP — Time of departure from work\nJWMNP — Travel time to work (in minutes)\n\nAnd categorical variables:\n\nFER — Fertility (whether the woman had a birth in the last 12 months)\nHHL — Household language\nHISPEED — Access to high-speed internet\nJWTRNS — Means of transportation to work\nSCH — School enrollment\nSCHL — Educational attainment\nSEX — Sex\n\nWe would also like to be able to specify the geography level. The possible values for this are All, Region, Division, or State. The user can then specify which region, divison or state they would like to return information for using the geo_level parameter.\nFurthemore, we will also allow the user to specify an optional argument to subset the data.\n\n\nFirst, we load our libraries\n\nlibrary(httr)\nlibrary(tibble)\nlibrary(jsonlite)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(tidyr)\n\nFirst, we will build a helper function to take what is returned by GET() and turn it into a tibble. We are also building in all the requirements specified at the beginning of the data processing section.\n\n# 1. helper function\nhelper &lt;- function(year = 2022,\n                   numeric_vars = c(\"AGEP\", \"PWGTP\"),\n                   categorical_vars = c(\"SEX\"),\n                   geography = \"All\",\n                   geo_level = \"*\",\n                   arguments = NULL) {\n  \n  # Input Validation\n  ## year validation\n  if (!is.numeric(year) || length(year) != 1 || year &lt; 2010 || year &gt; 2022) {\n    stop(\"Error: 'year' must be a single number between 2010 and 2022.\")\n  }\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!all(numeric_vars %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables requested.\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(categorical_vars %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables requested.\")\n  }\n  \n  ## Geography validation : region, division, state should be lowercase\n  valid_geography &lt;- c(\"All\", \"region\", \"division\", \"state\")\n  if (!all(geography %in% valid_geography)) {\n    stop(\"Error: Invalid geography requested.\")\n  }\n  \n  base &lt;- paste(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums\", sep = \"\")\n  \n  # Construct query parameters\n  ## Ensure PWGTP is always included for calculations\n  all_vars &lt;- unique(c(\"PWGTP\", numeric_vars, categorical_vars))\n  ## If geography is \"All\", do not include 'for' parameter\n  if (geography == \"All\") {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      arguments\n    )\n    ## If geography is specified, include geography and geo level in 'for' parameter\n  } else {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      list('for' = paste0(geography, \":\", geo_level)),\n      arguments\n    )\n  }\n  \n  # request data from API\n  response &lt;- GET(url = base, query = query_params)\n  if (status_code(response) != 200) {\n    stop(\"Error: The Census API returned an error. Status code: \", status_code(response))\n  }\n  parsed &lt;- fromJSON(rawToChar(response$content))\n  \n  # Set Column names as first row and convert to tibble\n  header &lt;- parsed[1,]\n  data &lt;- parsed[-1,]\n  colnames(data) &lt;- header\n  result_tibble &lt;- as_tibble(data)\n  \n  #Convert numeric variables as numeric\n  for (num_var in numeric_vars) {\n  if (num_var %in% colnames(result_tibble)) {\n    result_tibble[[num_var]] &lt;- as.numeric(result_tibble[[num_var]])}}\n\n  # Converting categorical variables to be factors\n  for (cat_var in categorical_vars) {\n  if (cat_var %in% colnames(result_tibble)) {\n    result_tibble[[cat_var]] &lt;- factor(result_tibble[[cat_var]])\n  }\n}\n  \n  \n\nreturn(result_tibble)\n  \n}\n\nTesting the helper function\n\n# Example 1: Single Year Query\n\n# a. Get data for region:3, year:2021, SCHL:24 including AGEP, GASP, SEX\ndata_2021 &lt;- helper(\n  year = 2021,\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"24\")\n)\n\nprint(data_2021)\n\n# A tibble: 14,810 × 6\n   PWGTP  AGEP  GASP SEX   SCHL  region\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; \n 1 20       49     3 1     24    3     \n 2 51       46     3 1     24    3     \n 3 9        85     3 2     24    3     \n 4 79       67     3 2     24    3     \n 5 12       76     3 1     24    3     \n 6 13       94     3 2     24    3     \n 7 2        49     3 1     24    3     \n 8 5        25     3 2     24    3     \n 9 30       39     3 1     24    3     \n10 6        70     3 1     24    3     \n# ℹ 14,800 more rows\n\n# b. Get data for state:6, year:2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH\ndata_2022 &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\"),\n  categorical_vars = c(\"FER\", \"HHL\", \"HISPEED\", \"SCH\"),\n  geography = c(\"state\"),\n  geo_level = c(\"6\"),\n  arguments = list('JWTRNS' = \"10\")\n)\n\nprint(data_2022)\n\n# A tibble: 4,927 × 11\n   PWGTP GRPIP  JWAP  JWDP JWMNP FER   HHL   HISPEED SCH   JWTRNS state\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt; &lt;chr&gt;  &lt;chr&gt;\n 1 151       0   167   103     5 2     2     1       1     10     06   \n 2 66        0    74    31    20 0     4     2       1     10     06   \n 3 75        0    74    31    20 0     4     2       3     10     06   \n 4 74       31   106    61    30 0     2     1       1     10     06   \n 5 173      38    97    55    15 0     1     1       1     10     06   \n 6 63        0    87    47     5 0     1     1       1     10     06   \n 7 16        0   106    67     1 0     1     2       1     10     06   \n 8 98        0    94    55     1 0     1     2       1     10     06   \n 9 102       0    74    31    20 0     1     1       1     10     06   \n10 48       30   125    82     5 2     4     1       1     10     06   \n# ℹ 4,917 more rows\n\n\nThe results from the helper functions look good. We will now move on to building a function that can handle queries across multiple years.\n\nmultiple_years_helper&lt;- function(years, ...) {\n  \n  # Use lapply to call the single-year function for each year in the vector\n  multiple_years_data &lt;- lapply(years, function(y) {\n    message(\"Fetching data for year: \", y)\n    \n    # Call the single-year function, passing along extra arguments\n    result_tibble &lt;- helper(year = y, ...)\n    \n    # Add a year column\n    result_tibble$year &lt;- y\n    \n    # print(result_tibble)\n    return(result_tibble)\n  })\n  \n  # Combine all the tibbles into a single one\n  combined_result_tibble &lt;- bind_rows(multiple_years_data)\n  \n  return(combined_result_tibble)\n}\n\nNow that the multiple year query function has been built, we will test it out.\n\n# Example 2: Multiple Year Query\nmessage(\"Example 2: Multiple Year Query\")\n\nExample 2: Multiple Year Query\n\n# a. Get data for region:3, years:2021-2022, SCHL:24 including\ndata_2021_2022 &lt;- multiple_years_helper(\n  years = c(2021, 2022),\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"24\")\n)\n\nFetching data for year: 2021\n\n\nFetching data for year: 2022\n\nprint(data_2021_2022)\n\n# A tibble: 31,031 × 7\n   PWGTP  AGEP  GASP SEX   SCHL  region  year\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1 20       49     3 1     24    3       2021\n 2 51       46     3 1     24    3       2021\n 3 9        85     3 2     24    3       2021\n 4 79       67     3 2     24    3       2021\n 5 12       76     3 1     24    3       2021\n 6 13       94     3 2     24    3       2021\n 7 2        49     3 1     24    3       2021\n 8 5        25     3 2     24    3       2021\n 9 30       39     3 1     24    3       2021\n10 6        70     3 1     24    3       2021\n# ℹ 31,021 more rows\n\n# b. Get data for state:6, years:2019, 2021, 2022, JWTRNS:10 including GRPIP, JWAP, JWDP, JWMNP, FER, HHL, HISPEED, SCH\ndata_2019_2022 &lt;- multiple_years_helper(\n  # Caution : There is no data in 2020\n  years = c(2019, 2021, 2022),\n  numeric_vars = c(\"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\"),\n  categorical_vars = c(\"FER\", \"HHL\", \"HISPEED\", \"SCH\"),\n  geography = c(\"state\"),\n  geo_level = c(\"6\"),\n  arguments = list('JWTRNS' = \"10\")\n)\n\nFetching data for year: 2019\n\n\nFetching data for year: 2021\n\n\nFetching data for year: 2022\n\nprint(data_2019_2022)\n\n# A tibble: 13,771 × 12\n   PWGTP GRPIP  JWAP  JWDP JWMNP FER   HHL   HISPEED SCH   JWTRNS state  year\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 52        0   192   115    12 2     0     0       2     10     6      2019\n 2 16        0   117    76    10 0     0     0       2     10     6      2019\n 3 21        0   181   109    15 0     0     0       2     10     6      2019\n 4 34        0   106    64    15 0     0     0       1     10     6      2019\n 5 33        0   100    59    10 2     0     0       3     10     6      2019\n 6 93        0   165   102     6 0     0     0       2     10     6      2019\n 7 61        0    97    57     5 2     0     0       2     10     6      2019\n 8 94        0    91    50    10 0     0     0       1     10     6      2019\n 9 61        0    69    29     5 0     0     0       1     10     6      2019\n10 25        0    94    51    20 2     0     0       2     10     6      2019\n# ℹ 13,761 more rows"
  },
  {
    "objectID": "Proj1.html#summary-method",
    "href": "Proj1.html#summary-method",
    "title": "Project1_g7",
    "section": "",
    "text": "We would like to add another class to the data, so we can create census specific methods for it.\n\n\n\nFirst, we modify our helper function to create the data, to make the tibble have an additional class of census.\nI just copied the original helper function from above. The modified line is noted.\n\n\n# 1. helper function\nhelper &lt;- function(year = 2022,\n                   numeric_vars = c(\"AGEP\", \"PWGTP\"),\n                   categorical_vars = c(\"SEX\"),\n                   geography = \"All\",\n                   geo_level = \"*\",\n                   arguments = NULL) {\n  \n  # Input Validation\n  ## year validation\n  if (!is.numeric(year) || length(year) != 1 || year &lt; 2010 || year &gt; 2022) {\n    stop(\"Error: 'year' must be a single number between 2010 and 2022.\")\n  }\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!all(numeric_vars %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables requested.\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(categorical_vars %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables requested.\")\n  }\n  \n  ## Geography validation : region, division, state should be lowercase\n  valid_geography &lt;- c(\"All\", \"region\", \"division\", \"state\")\n  if (!all(geography %in% valid_geography)) {\n    stop(\"Error: Invalid geography requested.\")\n  }\n  \n  base &lt;- paste(\"https://api.census.gov/data/\", year, \"/acs/acs1/pums\", sep = \"\")\n  \n  # Construct query parameters\n  ## Ensure PWGTP is always included for calculations\n  all_vars &lt;- unique(c(\"PWGTP\", numeric_vars, categorical_vars))\n  ## If geography is \"All\", do not include 'for' parameter\n  if (geography == \"All\") {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      arguments\n    )\n    ## If geography is specified, include geography and geo level in 'for' parameter\n  } else {\n    query_params &lt;- c(\n      list('get' = paste(all_vars, collapse = \",\")),\n      list('for' = paste0(geography, \":\", geo_level)),\n      arguments\n    )\n  }\n  \n  # request data from API\n  response &lt;- GET(url = base, query = query_params)\n  if (status_code(response) != 200) {\n    stop(\"Error: The Census API returned an error. Status code: \", status_code(response))\n  }\n  parsed &lt;- fromJSON(rawToChar(response$content))\n  \n  # Set Column names as first row and convert to tibble\n  header &lt;- parsed[1,]\n  data &lt;- parsed[-1,]\n  colnames(data) &lt;- header\n  result_tibble &lt;- as_tibble(data)\n  \n  #Convert numeric variables as numeric\n  for (num_var in numeric_vars) {\n  if (num_var %in% colnames(result_tibble)) {\n    result_tibble[[num_var]] &lt;- as.numeric(result_tibble[[num_var]])}}\n\n  # Converting categorical variables to be factors\n  for (cat_var in categorical_vars) {\n  if (cat_var %in% colnames(result_tibble)) {\n    result_tibble[[cat_var]] &lt;- factor(result_tibble[[cat_var]])\n  }\n}\n  \n  # The following line is our new modification, it adds a new class (census) to our result_tibble\nclass(result_tibble) &lt;- c(\"census\", class(result_tibble))\n\nreturn(result_tibble)\n  \n}\n\n\n\n\n\nBelow is a summary method.\nAs arguments, it takes the tibble with class census, the numeric variable(s) to summarize, the categorical variable(s) to summarize. Default values for numeric variables and categorical variables are all variables.\nIt returns a named list that contains summary statistics for each column.\nA count table is created for categorical variables, and mean and standard deviation are calculated for numeric variables.\nThe names of the returned list described the summarized variable and relevant statistic.\n\n\n#Defining default Numeric Variables for the method\nnumeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n\n#Defining Default Categorical Variables for the method\ncategorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n\nsummary.census &lt;- function(cen_tbl,num_vars=numeric_vars, cat_vars=categorical_vars ){\n  \n  # initialize list to return information\n  ret_list&lt;-list() \n  \n  # First, lets get counts of categorical variables\n  # We append the count tables to the list\n  for (cat_var in cat_vars){\n    \n    #create summary table for column\n    sum_tab&lt;-table(cen_tbl[[cat_var]])\n    \n    # add table to return list\n    item_name&lt;-paste(cat_var, \"count\")\n    ret_list[[item_name]] &lt;- sum_tab\n  }\n  \n  \n  # Next, we get the means and standard deviations for our numeric variables\n  for (num_var in num_vars){\n    \n    # Get column\n    num_var_col&lt;-cen_tbl[[num_var]]\n    \n    # get mean and SD of col, ignore NA values\n    num_var_col_mean&lt;-(mean(as.numeric(num_var_col, na.rm = TRUE)))\n    num_var_col_sd&lt;-(sd(as.numeric(num_var_col, na.rm = TRUE)))\n    \n    # Add items to return list\n    \n    mean_item_name&lt;-paste(num_var, \"mean\")\n    sd_item_name&lt;-paste(num_var,\"SD\")\n    ret_list[[mean_item_name]] &lt;- num_var_col_mean\n    ret_list[[sd_item_name]] &lt;- num_var_col_sd\n  }\n  \n  print(ret_list)\n}\n\n\n\n\nFirst, I return something with an API query.\n\n## TESTING\ndata_2021 &lt;- helper(\n  year = 2021,\n  numeric_vars = c(\"AGEP\", \"GASP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"region\"),\n  geo_level = c(\"3\"),\n  arguments = list('SCHL' = \"23,24\")\n) \n\nNext, let’s test it out without specifying any variables.\n\nsummary(data_2021)\n\n$`FER count`\n&lt; table of extent 0 &gt;\n\n$`HHL count`\n&lt; table of extent 0 &gt;\n\n$`HISPEED count`\n&lt; table of extent 0 &gt;\n\n$`JWTRNS count`\n&lt; table of extent 0 &gt;\n\n$`SCH count`\n&lt; table of extent 0 &gt;\n\n$`SCHL count`\n\n   23    24 \n21320 14810 \n\n$`SEX count`\n\n    1     2 \n20215 15915 \n\n$`AGEP mean`\n[1] 55.05569\n\n$`AGEP SD`\n[1] 16.53263\n\n$`GASP mean`\n[1] 48.22793\n\n$`GASP SD`\n[1] 75.93842\n\n$`GRPIP mean`\n[1] NaN\n\n$`GRPIP SD`\n[1] NA\n\n$`JWAP mean`\n[1] NaN\n\n$`JWAP SD`\n[1] NA\n\n$`JWDP mean`\n[1] NaN\n\n$`JWDP SD`\n[1] NA\n\n$`JWMNP mean`\n[1] NaN\n\n$`JWMNP SD`\n[1] NA\n\n\nThis seems to work well.\nNext, let’s test it out, specifying some variables and verifying the calculated statistics.\n\nsummary(data_2021,c(\"GASP\", \"AGEP\"), c(\"SEX\",\"SCHL\"))\n\n$`SEX count`\n\n    1     2 \n20215 15915 \n\n$`SCHL count`\n\n   23    24 \n21320 14810 \n\n$`GASP mean`\n[1] 48.22793\n\n$`GASP SD`\n[1] 75.93842\n\n$`AGEP mean`\n[1] 55.05569\n\n$`AGEP SD`\n[1] 16.53263\n\n\nWe will calculate these statistics without the function to verify that it is working properly.\n\nprint(\"Table by SEX Variable\")\n\n[1] \"Table by SEX Variable\"\n\ntable(data_2021[[\"SEX\"]])\n\n\n    1     2 \n20215 15915 \n\nprint(\"Table by SCHL Variable\")\n\n[1] \"Table by SCHL Variable\"\n\ntable(data_2021[[\"SCHL\"]])\n\n\n   23    24 \n21320 14810 \n\nprint(\"GASP mean\")\n\n[1] \"GASP mean\"\n\nmean(as.numeric(data_2021[[\"GASP\"]]),na.rm=TRUE)\n\n[1] 48.22793\n\nprint(\"GASP SD\")\n\n[1] \"GASP SD\"\n\nsd(as.numeric(data_2021[[\"GASP\"]]),na.rm=TRUE)\n\n[1] 75.93842\n\nprint(\"AGEP mean\")\n\n[1] \"AGEP mean\"\n\nmean(as.numeric(data_2021[[\"AGEP\"]]),na.rm=TRUE)\n\n[1] 55.05569\n\nprint(\"AGEP SD\")\n\n[1] \"AGEP SD\"\n\nsd(as.numeric(data_2021[[\"AGEP\"]]),na.rm=TRUE)\n\n[1] 16.53263\n\n\nThe calculated values match the values given by our function. This is good!"
  },
  {
    "objectID": "Proj1.html#plotting-method",
    "href": "Proj1.html#plotting-method",
    "title": "Project1_g7",
    "section": "",
    "text": "The following code creates box plots based on a user specified categorical variable and numeric variable.\nIt also checks to make sure variables are correctly specified, and stops if they aren’t.\nI filter out na values before plotting, to ensure the plot is accurate and looks good.\n\n\n# First attempt at plot.census function\nplot.census&lt;-function(cen_tbl,cat_var,num_var){\n  \n  ## variable validation\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  if (!(num_var %in% valid_numeric_vars)) {\n    stop(\"Error: Invalid numeric variables inputted\")\n  }\n  \n  valid_categorical_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!(cat_var %in% valid_categorical_vars)) {\n    stop(\"Error: Invalid categorical variables inputted\")\n  }\n  # The all_of command helps handle string column names\nplt_tbl &lt;- cen_tbl %&gt;%\n  select(all_of(c(cat_var, num_var, \"PWGTP\"))) %&gt;%\n  drop_na(all_of(c(cat_var, num_var)))\n  \n  \nggplot(plt_tbl, aes(x = get(cat_var), y = as.numeric(get(num_var)), weight = as.numeric(PWGTP))) +\n  geom_boxplot()\n}\n\nTesting the plot function\n\n# making sure the stop clause works\n\n# plot.census(data_2021, cat_var = \"SCL\", num_var = \"GASP\")\n# \n# plot.census(data_2021, cat_var = \"SCHL\", num_var = \"GSP\")\n\n# stop clause does work. Commented these lines out so document could render error free.\n\nplot.census(data_2021, cat_var = \"SCHL\", num_var = \"GASP\")\n\n\n\nplot.census(data_2021, cat_var = \"SCHL\", num_var = \"AGEP\")\n\n\n\nplot.census(data_2021, cat_var = \"SEX\", num_var = \"GASP\")"
  },
  {
    "objectID": "Proj1.html#investigating-something-from-the-data",
    "href": "Proj1.html#investigating-something-from-the-data",
    "title": "Project1_g7",
    "section": "",
    "text": "I’d like to investigate affordability between states, over time. My fundamental question is–how has gross rent as a percentage of household income past 12 months (GRPIP) changed over time, and does this vary by sex? Is there a difference in this between North Carolina, a state that is considered relatively affordable, and New York, a state that is reputed to be unaffordable?\n\nFirst, we get the data.\n\ndata_2010_NC &lt;- helper(\n  year = 2010,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"state\"),\n  geo_level = c(\"37\"),\n) \n\ndata_2010_NY &lt;- helper(\n  year = 2010,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = \"state\",\n  geo_level = \"36\"\n)\n\n\ndata_2022_NC &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = c(\"state\"),\n  geo_level = c(\"37\"),\n) \n\ndata_2022_NY &lt;- helper(\n  year = 2022,\n  numeric_vars = c(\"GRPIP\"),\n  categorical_vars = c(\"SEX\"),\n  geography = \"state\",\n  geo_level = \"36\"\n)\n\nLet’s look at a summary of the data for our relevant variables\n\nsummary(data_2010_NC,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n45813 49718 \n\n$`GRPIP mean`\n[1] 9.37436\n\n$`GRPIP SD`\n[1] 21.45152\n\n\n\nsummary(data_2022_NC,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n53050 56180 \n\n$`GRPIP mean`\n[1] 7.324297\n\n$`GRPIP SD`\n[1] 18.64659\n\n\nIn North Carolina, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010.\n\nsummary(data_2010_NY,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n    1     2 \n91549 98605 \n\n$`GRPIP mean`\n[1] 12.74337\n\n$`GRPIP SD`\n[1] 24.73648\n\n\n\nsummary(data_2022_NY,c(\"GRPIP\"), c(\"SEX\"))\n\n$`SEX count`\n\n     1      2 \n 98719 105172 \n\n$`GRPIP mean`\n[1] 10.63511\n\n$`GRPIP SD`\n[1] 23.03031\n\n\nIn New York, the average gross rent as a percentage of household income (GRPIP) is lower in 2022 than 2010. This is surprising–there is a lot of discourse about rising rents in New York and in the United States in general. However, New Yorkers are still spending more on their rents on average than North Carolinians."
  },
  {
    "objectID": "Proj1.html#plotting",
    "href": "Proj1.html#plotting",
    "title": "Project1_g7",
    "section": "",
    "text": "First, I’d like to compare sex and GRPIP.\n\nplot.census(data_2010_NC, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nplot.census(data_2022_NC, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\nWhile GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average.\n\nplot.census(data_2010_NY, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nplot.census(data_2022_NY, cat_var = \"SEX\", num_var = \"GRPIP\")\n\n\n\n\n\nWhile GRPIP has decreased for both men (1) and women (2) between 2010 and 2022 in New York as well as North Carolina, there is still a gap between men and women in average gross rent as a percentage of household income, with women paying more than men on average. However, comparing North Carolina and New York, it appears as though North Carolina has a slightly larger gap between rent GRPIP between men and women.\nWhile GRPIP generally decreased for North Carolinians and New Yorkers between 2010 and 2022, the gap in GRPIP persists between men and women. This could be a result of the income gap between men and women."
  }
]